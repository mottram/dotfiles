# mpc search 'n' play

mpcplay() {
    type=$(echo "$1" | sed 's/\<./\u&/')
    term=$(echo "$2" | sed 's/\<./\u&/')
    if pidof -x mpd >/dev/null
        then
            mpc -q pause
            mpc -q clear
            mpc search "$1" "$2" | mpc add
            mpc -q shuffle
            mpc -q play
            echo ":: $type '$term' now playing."
    else
        echo ":: MPD isn't running"
    fi
}


# quick git commit
function gg {
  git commit -v -a -m "$*"
}

# view source files with pygments syntax colouring
function pless {
  pygmentize $1 | less -rN
}

# mkdir, cd into it
mkcd () {
mkdir -p "$*"
cd "$*"
}

# Move to Trash
trash() {
mv $1 ~/.Trash/
}

# list and ack
function lgr {
  ls -a | ack -i $1 
}

# new tmux session
function tmn {
  tmux new -s $1 
}

# attach a tmux Session
function tma {
  tmux att -t $1	
} 

# Poor man's Notational Velocity!
function note {
  vim ~/notes/"$*".txt	
}

function nls {
  ls -c ~/notes | ack "$*"
	}

# Calc
calc(){ awk "BEGIN{ print $* }" ;}

# Links list
frsh() {
echo "$1" >> ~/notes/fresh-links.txt
}

# make a backup of a file
bk() {
    cp -a "$1" "${1}_$(date -u)"
}

# timer
alarm() {
    utimer -c $1 1>/dev/null ; espeak $2 2>/dev/null && notify-send $2
}

# Instapaper - $1 is pw, $2 url

insta() {
ricepaper -u "jack.mottram@gmail.com" -p "$1" "$2"
}

# Tumblr

tumqueue() {
tumblr post --queue "$1" --host=onethingwell.org 2>/dev/null
open https://www.tumblr.com/blog/onethingwell/queue
}

tumdraft() {
tumblr post --draft "$1" --host=onethingwell.org 2>/dev/null
open https://www.tumblr.com/blog/onethingwell/drafts
}

# grep for running process

any() {
    emulate -L zsh
    if [[ -z "$1" ]] ; then
        echo "any - ack for process(es) by keyword" >&2
        echo "Usage: any <keyword>" >&2 ; return 1
    else
        local STRING=$1
        local LENGTH=$(expr length $STRING)
        local FIRSCHAR=$(echo $(expr substr $STRING 1 1))
        local REST=$(echo $(expr substr $STRING 2 $LENGTH))
        ps xauwww| ack "[$FIRSCHAR]$REST"
    fi
}

clip() {
    type=`file "$1"|grep -c text`
    if [ $type -gt 0 ]; then
        cat "$@"|pbcopy
        echo "Contents of $1 are in the clipboard."
    else
        echo "File \"$1\" is not plain text."
    fi
}

# Volume control on the 1018

vol() { 
    amixer set 'Master' "$1%" &>/dev/null
}

# Notify when finished/failed

function nwf {
    "$@"
    if [ $? -gt 0 ]; then
        notify-send -u critical "$1 FAILED"
    else
        notify-send -u critical "$1 finished"
    fi
}

# Improved xclip from 
# http://madebynathan.com/2011/10/04/a-nicer-way-to-use-xclip/

cb() {
  local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [ "$USER" == "root" ]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if [ "$( tty )" == 'not a tty' ]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string or the contents of a file to the clipboard."
      echo "Usage: cb <string or file>"
      echo "       echo <string or file> | cb"
    else
      # If the input is a filename that exists, then use the contents of that file.
      if [ -e "$input" ]; then input="$(cat $input)"; fi
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}
